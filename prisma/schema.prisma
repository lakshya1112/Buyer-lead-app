// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS: Defining the allowed options for certain fields
enum City {
  Chandigarh
  Mohali
  Zirakpur
  Panchkula
  Other
}

enum PropertyType {
  Apartment
  Villa
  Plot
  Office
  Retail
}

enum Bhk {
  Studio
  OneBHK
  TwoBHK
  ThreeBHK
  FourBHK
  FivePlusBHK
}

enum Purpose {
  Buy
  Rent
}

enum Timeline {
  ReadyToMoveIn
  OneToThreeMonths
  ThreeToSixMonths
  Exploring
}

enum Source {
  Website
  Referral
  WalkIn
  Call
  Other
}

enum Status {
  New
  Qualified
  Contacted
  Visited
  Negotiation
  Converted
  Dropped
}

// MODELS: Defining our database tables

// This is a simple model for our users
model User {
  id    String   @id @default(uuid())
  email String   @unique
  name  String?
  leads buyers[] // A user can have many leads
}

// This is the main table for our buyer leads
model buyers {
  id           String       @id @default(uuid())
  fullName     String
  email        String?
  phone        String
  city         City
  propertyType PropertyType
  bhk          Bhk? // The '?' makes this field optional
  purpose      Purpose
  budgetMin    Int?
  budgetMax    Int?
  timeline     Timeline
  source       Source
  status       Status       @default(New)
  notes        String?
  tags         String[] // Array of strings
  ownerId      String
  updatedAt    DateTime     @updatedAt

  // --- Relationships ---
  owner   User            @relation(fields: [ownerId], references: [id])
  history buyer_history[]

  @@map("buyers") // This explicitly names the table "buyers" in the database
}

// This table will store a log of all changes made to a lead
model buyer_history {
  id         String   @id @default(uuid())
  buyerId    String
  changedBy  String // We'll store the user's email or ID here
  changedAt  DateTime @default(now())
  diff       Json // Stores a JSON object of what was changed

  // --- Relationships ---
  buyer buyers @relation(fields: [buyerId], references: [id], onDelete: Cascade)

  @@map("buyer_history")
}